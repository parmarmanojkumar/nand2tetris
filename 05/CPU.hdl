// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in=instruction[15] ,out=invins15 ); 
    Mux16(a=aluout ,b= instruction,sel=invins15 ,out= aiout); 
        
    Or(a=instruction[5] ,b=invins15 ,out=arload );
    ARegister(in= aiout ,load=arload ,out=arout );
    
    And(a = instruction[15], b = instruction[12],out = tmp12);
    Mux16(a= arout ,b=inM ,sel=tmp12 ,out=amout ); 
    
    And(a = instruction[15], b = instruction[4],out = tmp4);
    DRegister(in= aluout,load=tmp4 ,out=drout );
    
    Or(a = invins15, b = instruction[11],out = tmp11);
    Or(a = invins15, b = instruction[10],out = tmp10);
    And(a = instruction[15], b = instruction[09],out = tmp09);
    And(a = instruction[15], b = instruction[08],out = tmp08);
    And(a = instruction[15], b = instruction[07],out = tmp07);
    And(a = instruction[15], b = instruction[06],out = tmp06);
    ALU(x  = drout,
    	y  = amout,
    	zx = tmp11,
    	nx = tmp10,
    	zy = tmp09,
    	ny = tmp08,
    	f  = tmp07,
    	no = tmp06, 
    	out= aluout,
    	zr = aluzrout,
    	ng = alungout);
    
    And(a = instruction[2], b = alungout, out  = w1);
    And(a = instruction[1], b = aluzrout, out  = w2);
    Or(a = aluzrout,       b = alungout, out  = w3);
    Not(in = w3, out = w4);
    And(a = instruction[0], b = w4, out  = w5);
    And(a = instruction[2], b = instruction[1], out  = w6);
    And(a = instruction[0], b = w6, out  = w7);
    Or(a = w1, b = w2, out = w8);
    Or(a = w5, b = w7, out = w9);
    Or(a = w8, b = w9, out = w10);
    And(a = w10, b = instruction[15],out = pcload);
    PC(in= arout ,load= pcload ,inc= true ,reset=reset ,out[0..14]=pc[0..14] );
    
    Not16(in = aluout, out = tmpout1);
    Not16(in = tmpout1, out = outM);
    
    And(a = instruction[15], b = instruction[03],out = tmp03);
    Not(in = tmp03, out = tmpout2);
    Not(in = tmpout2, out = writeM);
    
    Not16(in = arout, out = tmpout3);
    Not16(in = tmpout3, out[0..14]=addressM[0..14]);
    
}